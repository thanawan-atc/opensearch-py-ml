pipeline {
    agent
    {
        docker {
            label 'Jenkins-Agent-AL2-X64-C54xlarge-Docker-Host'
            image 'opensearchstaging/ci-runner:release-centos7-clients-v4'
            alwaysPull true
        }
    }
    options {
        timeout(time: 1, unit: 'HOURS')
    }
    parameters {
        string(
            name: 'BASE_DOWNLOAD_PATH',
            description: 'S3 base path to download artifacts from eg:ml-models/huggingface/sentence-transformers/all-distilroberta-v1. DO NOT include the trailing backlash at the end',
            trim: true
        )
        string(
            name: 'VERSION',
            description: 'Version number of the model',
            trim: true
        )
        choice(
            name: 'MODEL_FORMAT',
            description: 'Tracing format of the model',
            choices: ['BOTH', 'TORCH_SCRIPT', 'ONNX']
        )
        }
    environment {
        ARTIFACT_PATH = "${env.BASE_DOWNLOAD_PATH == "ml-models/model_listing" ? "${env.BASE_DOWNLOAD_PATH}" : "${env.BASE_DOWNLOAD_PATH}/${env.VERSION}"}"
        UPLOAD_PATH = "models/ml-models"
        BUCKET_NAME = credentials('ml-models-bucket-name')
    }
    stages{
        stage('Parameters Check') {
            steps {
                script {
                    if (env.BASE_DOWNLOAD_PATH == "ml-models/model_listing" && env.VERSION.isEmpty() && env.MODEL_FORMAT.isEmpty()) {
                        echo "Proceeding to download the ml-models/model_listing."
                    } else if (env.BASE_DOWNLOAD_PATH.isEmpty()) {
                        currentBuild.result = 'ABORTED'
                        error('BASE_DOWNLOAD_PATH cannot be empty! Please provide the correct values.')
                    } else if (env.VERSION.isEmpty()) {
                        currentBuild.result = 'ABORTED'
                        error('VERSION cannot be empty! Please provide the correct values.')
                    } else if (env.MODEL_FORMAT.isEmpty()) {
                        currentBuild.result = 'ABORTED'
                        error('MODEL_FORMAT cannot be empty! Please provide the correct values.')
                    } else {
                        echo "Proceeding to download the ml-models."
                    }
                    if(env.BASE_DOWNLOAD_PATH.endsWith('/')) {
                        currentBuild.result = 'ABORTED'
                        error('"/" not allowed at the end of the BASE_DOWNLOAD_PATH') 
                    }
                }
            }
        }
        stage('Download the artifacts') {
            steps {
                script {
                    role = "${{ secrets.PERSONAL_MODEL_UPLOADER_ROLE }}"
                    region = "${{ secrets.PERSONAL_MODEL_UPLOADER_AWS_REGION }}"
                    session = "model-releasing"
                    bucket = "${{ secrets.PERSONAL_MODEL_BUCKET }}"
                    local_path = "${env.WORKSPACE}/artifacts"
                    if (env.BASE_DOWNLOAD_PATH == "ml-models/model_listing") {
                        download_path = "${env.ARTIFACT_PATH}/"
                        withCredentials([string(credentialsId: "${args.roleAccountNumberCred}", variable: 'AWS_ACCOUNT_NUMBER')]) {
                            withAWS(role: $role, roleAccount: "${AWS_ACCOUNT_NUMBER}", duration: 900, roleSessionName: $session, region: $region) {
                                s3Download(file: , bucket: $bucket, path: $local_path, force: true)
                        }    
                    } else {
                        if (env.MODEL_FORMAT == "TORCH_SCRIPT" || env.MODEL_FORMAT == "BOTH) {
                            download_path = "${env.ARTIFACT_PATH}/torch_script/"
                            withCredentials([string(credentialsId: "${args.roleAccountNumberCred}", variable: 'AWS_ACCOUNT_NUMBER')]) {
                                withAWS(role: $role, roleAccount: "${AWS_ACCOUNT_NUMBER}", duration: 900, roleSessionName: $session, region: $region) {
                                    s3Download(file: , bucket: $bucket, path: $local_path, force: true)
                            } 
                        }
                        if (env.MODEL_FORMAT == "ONNX" || env.MODEL_FORMAT == "BOTH) {
                            download_path = "${env.ARTIFACT_PATH}/onnx/"
                            withCredentials([string(credentialsId: "${args.roleAccountNumberCred}", variable: 'AWS_ACCOUNT_NUMBER')]) {
                                withAWS(role: $role, roleAccount: "${AWS_ACCOUNT_NUMBER}", duration: 900, roleSessionName: $session, region: $region) {
                                    s3Download(file: , bucket: $bucket, path: $local_path, force: true)
                            } 
                        }
                    }
                }
            }
        }
        stage('Sign and Release the artifacts') {
            steps {
                script {
                    role = "${{ secrets.PERSONAL_MODEL_UPLOADER_ROLE_2 }}"
                    region = "${{ secrets.PERSONAL_MODEL_UPLOADER_AWS_REGION_2 }}"
                    session = "model-releasing"
                    bucket = "${{ secrets.PERSONAL_MODEL_BUCKET_2 }}"
                    source = "${env.WORKSPACE}/artifacts/ml-models"
                    destination = "${env.UPLOAD_PATH}"
                    withCredentials([
                        string(credentialsId: 'jenkins-aws-production-account', variable: 'AWS_ACCOUNT_ARTIFACT'),
                        string(credentialsId: 'jenkins-artifact-production-bucket-name', variable: 'ARTIFACT_PRODUCTION_BUCKET_NAME')]) {
                        withAWS(role: $role, roleAccount: "${AWS_ACCOUNT_ARTIFACT}", duration: 900, roleSessionName: $session) {
                            s3Upload(file: $source, bucket: $bucket, path: $destination)
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                postCleanup()
                }
            }
        }
    }
